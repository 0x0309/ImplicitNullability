using System.Threading.Tasks;
using JetBrains.Annotations;

namespace ImplicitNullability.Plugin.Tests.test.data.Integrative.TypeHighlightingTests
{
    public class TypeHighlightingAsyncMethodsSample
    {
        public async |Task|(0)<|string|(1)> AsyncMethod()
        {
            return await Async.NotNullResult("");
        }

        public async |Task|(2) VoidAsyncMethod()
        {
            await Async.NopTask;
        }

        [ItemCanBeNull]
        public async |Task|(3)<string> NullableAsyncMethod()
        {
            return await Async.CanBeNullResult<string>();
        }

        public |Task|(4)<|string|(5)> NonAsyncButTaskResult()
        {
            return Async.NotNullResult("");
        }

        [ItemCanBeNull]
        public |Task|(6)<string> NonAsyncButNullableTaskResult()
        {
            return Async.CanBeNullResult<string>();
        }

        [CanBeNull]
        [ItemCanBeNull]
        public Task<string> NonAsyncCanBeNullAndItemCanBeNullMethod()
        {
            return null;
        }

        // Prove the exemption for async void (see TypeHighlightingProblemAnalyzer):
        public async void AsyncVoidResult()
        {
            await Async.NopTask;
        }
    }
}

---------------------------------------------------------
(0): ReSharperImplicitNullabilityTypeHighlighting: 'Task' is (explicitly or implicitly) [NotNull]
(1): ReSharperImplicitNullabilityItemTypeHighlighting: Inner type 'string' is (explicitly or implicitly) [ItemNotNull]
(2): ReSharperImplicitNullabilityTypeHighlighting: 'Task' is (explicitly or implicitly) [NotNull]
(3): ReSharperImplicitNullabilityTypeHighlighting: 'Task' is (explicitly or implicitly) [NotNull]
(4): ReSharperImplicitNullabilityTypeHighlighting: 'Task' is (explicitly or implicitly) [NotNull]
(5): ReSharperImplicitNullabilityItemTypeHighlighting: Inner type 'string' is (explicitly or implicitly) [ItemNotNull]
(6): ReSharperImplicitNullabilityTypeHighlighting: 'Task' is (explicitly or implicitly) [NotNull]
